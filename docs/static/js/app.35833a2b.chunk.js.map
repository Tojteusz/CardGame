{"version":3,"sources":["components/CardHistory.tsx","components/Card.tsx","components/CardGame.tsx","App.tsx","web-build/register-service-worker.js"],"names":["styles","StyleSheet","create","list","maxHeight","historyElement","backgroundColor","padding","marginBottom","width","borderRadius","justifyContent","flexDirection","weight","fontWeight","CardHistory","history","HistoryItem","data","prevSymbol","symbolByLetter","prev","curSymbol","cur","View","style","Text","color","suit","state","point","letters","Fragment","FlatList","renderItem","item","keyExtractor","info","alignItems","cardSpace","card","height","overflow","button","gameover","fontSize","rowCenter","bothCenter","Card","back","Image","resizeMode","source","uri","image","cardOrder","suitOrder","CardGame","useState","remaining","setRemaining","id","setId","points","setPoints","setHistory","code","currentCard","setCurrentCard","prevCard","setPrevCard","indexOfOrderSuit","findIndex","v","value","getDeck","a","async","fetch","response","json","deck","success","cards","index","deck_id","console","error","nextCard","userState","currentIndex","undefined","currentSuit","prevSuit","hEl","old","setTimeout","nextRound","current","useEffect","flex","Button","disabled","onPress","title","TouchableOpacity","buttonStyle","blue","gold","App","container","navigator","window","addEventListener","serviceWorker","register","scope","then","catch"],"mappings":"4PAkFMA,EAASC,IAAWC,OAAO,CAE/BC,KAAM,CACJC,UAAW,KAGbC,eAAgB,CACdC,gBAAiB,UACjBC,QAAS,EACTC,aAAc,EACdC,MAAO,IACPC,aAAc,EACdC,eAAgB,gBAChBC,cAAe,OAGjBC,OAAQ,CACNC,WAAY,SAIDC,EA1FK,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,QAOfC,EAAc,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KACfC,EAAaC,EAAeF,EAAKG,MACjCC,EAAYF,EAAeF,EAAKK,KACtC,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAOzB,EAAOK,gBAClB,kBAACqB,EAAA,EAAD,CAAMD,MAAO,CAAC,CAAEE,MAAOL,EAAUK,OAAS3B,EAAOa,SAC/B,KAAfK,EAAKK,IAAI,GAAY,GAAKL,EAAKK,IAAI,GACnCD,EAAUM,MAEb,kBAACF,EAAA,EAAD,CAAMD,MAAOzB,EAAOa,QAAwB,UAAfK,EAAKW,MAAoB,IAAM,KAC5D,kBAACH,EAAA,EAAD,CAAMD,MAAO,CAAC,CAAEE,MAAOR,EAAWQ,OAAS3B,EAAOa,SAC/B,KAAhBK,EAAKG,KAAK,GAAY,GAAKH,EAAKG,KAAK,GACrCF,EAAWS,MAEd,kBAACF,EAAA,EAAD,KAAOR,EAAKY,MAAQ,eAAO,kBAU3BV,EAAiB,SAACW,GACtB,OAAQA,EAAQ,IACd,IAAK,IACH,MAAO,CACLH,KAAM,SACND,MAAO,SAEX,IAAK,IACH,MAAO,CACLC,KAAM,SACND,MAAO,OAEX,IAAK,IACH,MAAO,CACLC,KAAM,SACND,MAAO,SAEX,QACE,MAAO,CACLC,KAAM,SACND,MAAO,SAKf,OACE,kBAAC,IAAMK,SAAP,KACE,kBAACN,EAAA,EAAD,iBACA,kBAACO,EAAA,EAAD,CACER,MAAOzB,EAAOG,KACde,KAAMF,EACNkB,WAAY,gBAAGC,EAAH,EAAGA,KAAH,OAAc,kBAAClB,EAAD,CAAaC,KAAMiB,KAC7CC,aAAc,SAACD,GAAD,OAAUA,EAAKd,U,QCpC/BrB,EAASC,IAAWC,OAAO,CAC/BmC,KAAM,CACJzB,cAAe,MACf0B,WAAY,SACZ3B,eAAgB,iBAElB4B,UAAW,CACT7B,aAAc,GACdJ,gBAAiB,UACjBC,QAAS,IAEXiC,KAAM,CACJ/B,MAAO,IACPgC,OAAQ,IACR/B,aAAc,GACdgC,SAAU,UAEZC,OAAQ,CACNrC,gBAAiB,WAEnBsC,SAAU,CAAEC,SAAU,GAAIlB,MAAO,SACjCmB,UAAW,CACTR,WAAY,SACZ3B,eAAgB,SAChBC,cAAe,OAEjBmC,WAAY,CACVT,WAAY,SACZ3B,eAAgB,YAILqC,EA/DF,SAAC,GAAwC,IAAD,IAArCC,YAAqC,SAAvBT,EAAuB,EAAvBA,KAC5B,OACE,kBAAC,IAAMR,SAAP,KACGiB,GACC,kBAACzB,EAAA,EAAD,CAAMC,MAAO,CAACzB,EAAOuC,YACnB,kBAACW,EAAA,EAAD,CACEzB,MAAO,CAACzB,EAAOwC,MACfW,WAAW,UACXC,OAAQ,CACNC,IACE,2EAMRJ,GAAQT,GACR,kBAAChB,EAAA,EAAD,CAAMC,MAAO,CAACzB,EAAOuC,YACnB,kBAACW,EAAA,EAAD,CACEzB,MAAO,CAACzB,EAAOwC,MACfW,WAAW,UACXC,OAAQ,CACNC,IAAKb,EAAKc,Y,ikBCjBxB,IAAMC,EAAY,CAChB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,OACA,QACA,OACA,OAGIC,EAAY,CAAC,SAAU,WAAY,SAAU,SA4MpCC,EA1ME,WAAO,IAAD,EACaC,mBAAiB,GAD9B,WACdC,EADc,KACHC,EADG,OAEDF,mBAAiB,IAFhB,WAEdG,EAFc,KAEVC,EAFU,OAGOJ,mBAAiB,GAHxB,WAGdK,EAHc,KAGNC,EAHM,OAISN,mBAA4B,IAJrC,WAId1C,EAJc,KAILiD,EAJK,OAKiBP,mBAAgB,CACpDQ,MAAM,IANa,WAKdC,EALc,KAKDC,EALC,OAQWV,mBAAgB,CAC9CQ,MAAM,IATa,WAQdG,EARc,KAQJC,EARI,KAiBfC,EAAmB,SAAC/B,GACxB,OAAOe,EAAUiB,WAAU,SAACC,GAAD,OAAeA,IAAMjC,EAAKkC,UAMjDC,EAAU,4BAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEWE,MACrB,0DAHU,cAENC,EAFM,kBAAAH,EAAA,MAMiBG,EAASC,QAN1B,UAQQ,IAFdC,EANM,QAQHC,QARG,qBASJ,6CATI,OAWZlB,EAAU,GAEVC,EAAW,IACXK,EAAY,EAAD,KACNW,EAAKE,MAAM,IACX,CAAEC,MAAOb,EAAiBU,EAAKE,MAAM,OAE1CvB,EAAaqB,EAAKtB,WAClBG,EAAMmB,EAAKI,SAnBC,kDAqBZC,QAAQC,MAAR,MArBY,kEA6BVC,EAAW,SAAOC,GAAP,6BAAAb,EAAAC,OAAA,2EAAAD,EAAA,MAEUE,MAAM,uCACYjB,EADb,mBAFf,cAEPkB,EAFO,kBAAAH,EAAA,MAMgBG,EAASC,QANzB,UAQO,IAFdC,EANO,QAQJC,QARI,qBASL,6CATK,cAWP1C,EAAOyC,EAAKE,MAAM,GAElBO,EAAuBnB,EAAiB/B,GAE9C4B,EAAe,EAAD,KAAM5B,GAAS,CAAE4C,MAAOM,KAElC7D,EAA4B,aAET8D,IAAnBtB,EAASe,QACPM,EAAerB,EAASe,MAC1BvD,EAAQ,SACC6D,GAAgBrB,EAASe,QAC5BQ,EAAsBpC,EAAUgB,WACpC,SAACC,GAAD,OAAeA,IAAMjC,EAAKZ,QAEtBiE,EAAmBrC,EAAUgB,WACjC,SAACC,GAAD,OAAeA,IAAMJ,EAASzC,QAE5BgE,EAAcC,IAChBhE,EAAQ,YAKVA,IAAU4D,GACZzB,EAAUD,EAAS,GAGA,GAAjBM,EAASH,MAA8B,GAAb1B,EAAK0B,OAC3B4B,EAAuB,CAC3BzE,KAAMgD,EAASH,KACf3C,IAAKiB,EAAK0B,KACVrC,MAAOA,EACPC,MAAOD,IAAU4D,GAEnBxB,GAAW,SAAC8B,GAAD,OAAUD,GAAV,WAAkBC,QAG/BC,YACE,kBAAMC,EAAU,EAAD,KAAMhB,EAAKE,MAAM,IAAO,CAAEC,MAAOM,OAChD,KAGF9B,EAAaqB,EAAKtB,WAtDL,kBAwDNsB,GAxDM,yCA0DbK,QAAQC,MAAR,MA1Da,mBA2DN,GA3DM,kEAmEXU,EAAY,SAACC,GACjB5B,EAAY4B,GACZ9B,EAAe,CAAEF,MAAM,KAOzB,OAJAiC,qBAAU,WACRxB,MACC,IAGD,kBAACnD,EAAA,EAAD,CAAMC,MAAO,CAAEhB,MAAO,SACpB,kBAACe,EAAA,EAAD,CACEC,MAAO,CACL2E,KAAM,EACNxF,cAAe,MACfD,eAAgB,kBAGhBwD,EAAYD,MAAQ,kBAAC,EAAD,CAAMjB,MAAM,IACjCkB,EAAYD,MAAQ,kBAAC,EAAD,CAAM1B,KAAM2B,IAEjC,kBAAC3C,EAAA,EAAD,CAAMC,MAAO,CAACzB,EAAO+C,aACnB,kBAACrB,EAAA,EAAD,CAAMD,MAAO,CAAEoB,SAAU,GAAI/B,WAAY,MAAOa,MAAO,UAAvD,mBAGA,kBAACH,EAAA,EAAD,CACEC,MAAO,CACLzB,EAAO8C,UACP,CAAErC,MAAO,IAAKE,eAAgB,gBAAiBH,aAAc,MAG/D,kBAACkB,EAAA,EAAD,CAAMD,MAAO,CAAEoB,SAAU,KAAzB,wBAA2CkB,EAA3C,KACA,kBAACrC,EAAA,EAAD,CAAMD,MAAO,CAAEoB,SAAU,KAAzB,2BAA8Cc,EAA9C,MAEF,kBAACnC,EAAA,EAAD,CAAMC,MAAO,CAAEjB,aAAc,KAC1BmD,EAAY,GACX,kBAAC,IAAM3B,SAAP,KACE,kBAACN,EAAA,EAAD,+CACA,kBAACF,EAAA,EAAD,CACEC,MAAO,CACLb,cAAe,MACfD,eAAgB,kBAGlB,kBAAC0F,EAAA,EAAD,CACEC,SAA8B,GAApBnC,EAAYD,KACtBvC,MAAM,UACN4E,QAAS,kBAAMf,EAAS,WACxBgB,MAAM,WAER,kBAACH,EAAA,EAAD,CACEC,SAA8B,GAApBnC,EAAYD,KACtBqC,QAAS,kBAAMf,EAAS,UACxBgB,MAAM,YAKb7C,GAAa,GACZ,kBAAC,IAAM3B,SAAP,KACE,kBAACN,EAAA,EAAD,CAAMD,MAAO,CAACzB,EAAO4C,WAArB,aACA,kBAAClB,EAAA,EAAD,CAAMD,MAAO,CAACzB,EAAO4C,WAArB,eAA6CmB,KAKnD,kBAACvC,EAAA,EAAD,CAAMC,MAAO,IACX,kBAACgF,EAAA,EAAD,CACEhF,MAAO,CAACzB,EAAO0G,aACfH,QAAS,kBAAM5B,MAEf,kBAACjD,EAAA,EAAD,kBAGJ,kBAAC,EAAD,CAAaV,QAASA,KAEvBqD,EAASH,MAAQ,kBAAC,EAAD,CAAM1B,KAAM6B,OAQhCrE,EAASC,IAAWC,OAAO,CAC/BmC,KAAM,CACJzB,cAAe,MACf0B,WAAY,SACZ3B,eAAgB,iBAGlBiC,SAAU,CAAEC,SAAU,GAAIlB,MAAO,SACjCmB,UAAW,CACTR,WAAY,SACZ3B,eAAgB,SAChBC,cAAe,OAEjBmC,WAAY,CACVT,WAAY,SACZ3B,eAAgB,UAElB+F,YAAa,CACXlG,aAAc,GACdD,QAAS,EACTG,aAAc,EACdJ,gBAAiB,WAEnBqG,KAAM,CACJrG,gBAAiB,WAEnBsG,KAAM,CACJtG,gBAAiB,aCnQN,SAASuG,IACtB,OACE,kBAACrF,EAAA,EAAD,CAAMC,MAAOzB,EAAO8G,WAClB,kBAAC,EAAD,OAKN,IAAM9G,EAASC,IAAWC,OAAO,CAC/B4G,UAAW,CACTV,KAAM,EACN3F,MAAO,OACPH,gBAAiB,UACjBgC,WAAY,SACZ3B,eAAgB,a,4DChBhB,kBAAmBoG,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,0BAA2B,CAAEC,MAAO,MAC7CC,MAAK,SAAUhF,OAGfiF,OAAM,SAAU/B,GACfD,QAAQjD,KAAK,oCAAqCkD,W","file":"static/js/app.35833a2b.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\r\nimport { View, Text, FlatList, StyleSheet } from \"react-native\";\r\nimport { IHistoryElement, ICardSuitColor } from \"../interfaces/Interfaces\";\r\n\r\nexport interface ICardHistoryProps {\r\n  history: IHistoryElement[];\r\n}\r\n\r\n/**\r\n * Card history component\r\n * @param {CardHistoryProps} props - history of game\r\n * @returns {ReactElement} - history list of rounds\r\n */\r\nconst CardHistory = ({ history }: ICardHistoryProps): ReactElement => {\r\n  /**\r\n   * Display element of history\r\n   * current Card Code | >/< | previous Card Code | point\r\n   * @param {HistoryElement} data - history card element\r\n   * @returns {ReactElement} - item of history game round\r\n   */\r\n  const HistoryItem = ({ data }: { data: IHistoryElement }): ReactElement => {\r\n    const prevSymbol = symbolByLetter(data.prev);\r\n    const curSymbol = symbolByLetter(data.cur);\r\n    return (\r\n      <View style={styles.historyElement}>\r\n        <Text style={[{ color: curSymbol.color }, styles.weight]}>\r\n          {data.cur[0] == \"0\" ? 10 : data.cur[0]}\r\n          {curSymbol.suit}\r\n        </Text>\r\n        <Text style={styles.weight}>{data.state === \"lower\" ? \"<\" : \">\"}</Text>\r\n        <Text style={[{ color: prevSymbol.color }, styles.weight]}>\r\n          {data.prev[0] == \"0\" ? 10 : data.prev[0]}\r\n          {prevSymbol.suit}\r\n        </Text>\r\n        <Text>{data.point ? \"🟢\" : \"🔴\"}</Text>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * determinate card symbol and color from card code\r\n   * @param {string} letters - 2 letters code of card\r\n   * @returns {ICardSuitColor} - suite & color of given card\r\n   */\r\n  const symbolByLetter = (letters: string): ICardSuitColor => {\r\n    switch (letters[1]) {\r\n      case \"S\":\r\n        return {\r\n          suit: \"♣\",\r\n          color: \"black\",\r\n        };\r\n      case \"D\":\r\n        return {\r\n          suit: \"♦\",\r\n          color: \"red\",\r\n        };\r\n      case \"C\":\r\n        return {\r\n          suit: \"♠\",\r\n          color: \"black\",\r\n        };\r\n      default:\r\n        return {\r\n          suit: \"♥\",\r\n          color: \"red\",\r\n        };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Text>History:</Text>\r\n      <FlatList\r\n        style={styles.list}\r\n        data={history}\r\n        renderItem={({ item }) => <HistoryItem data={item} />}\r\n        keyExtractor={(item) => item.prev}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  /* style of list */\r\n  list: {\r\n    maxHeight: 200,\r\n  },\r\n  /* style of history element */\r\n  historyElement: {\r\n    backgroundColor: \"#205b23\",\r\n    padding: 3,\r\n    marginBottom: 5,\r\n    width: 100,\r\n    borderRadius: 5,\r\n    justifyContent: \"space-between\",\r\n    flexDirection: \"row\",\r\n  },\r\n  /* weight of font style in list */\r\n  weight: {\r\n    fontWeight: \"800\",\r\n  },\r\n});\r\n\r\nexport default CardHistory;\r\n","import React from \"react\";\r\nimport { View, Text, StyleSheet, Image } from \"react-native\";\r\nimport { ICard } from \"./../interfaces/Interfaces\";\r\n\r\ninterface ICardProps {\r\n  back?: boolean;\r\n  card?: ICard;\r\n}\r\n\r\nconst Card = ({ back = false, card }: ICardProps) => {\r\n  return (\r\n    <React.Fragment>\r\n      {back && (\r\n        <View style={[styles.cardSpace]}>\r\n          <Image\r\n            style={[styles.card]}\r\n            resizeMode=\"contain\"\r\n            source={{\r\n              uri:\r\n                \"https://opengameart.org/sites/default/files/card%20back%20black.png\",\r\n            }}\r\n          />\r\n        </View>\r\n      )}\r\n\r\n      {!back && card && (\r\n        <View style={[styles.cardSpace]}>\r\n          <Image\r\n            style={[styles.card]}\r\n            resizeMode=\"contain\"\r\n            source={{\r\n              uri: card.image,\r\n            }}\r\n          />\r\n        </View>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  info: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  cardSpace: {\r\n    borderRadius: 20,\r\n    backgroundColor: \"#205b23\",\r\n    padding: 20,\r\n  },\r\n  card: {\r\n    width: 300,\r\n    height: 523,\r\n    borderRadius: 20,\r\n    overflow: \"hidden\",\r\n  },\r\n  button: {\r\n    backgroundColor: \"#e0a230\",\r\n  },\r\n  gameover: { fontSize: 30, color: \"white\" },\r\n  rowCenter: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"row\",\r\n  },\r\n  bothCenter: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  Image,\r\n  Button,\r\n  FlatList,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport CardHistory from \"./CardHistory\";\r\nimport Card from \"./Card\";\r\nimport { IHistoryElement, INewDeck, ICard } from \"../interfaces/Interfaces\";\r\n\r\nconst cardOrder = [\r\n  \"2\",\r\n  \"3\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n  \"10\",\r\n  \"JACK\",\r\n  \"QUEEN\",\r\n  \"KING\",\r\n  \"ACE\",\r\n];\r\n\r\nconst suitOrder = [\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\"];\r\n\r\nconst CardGame = () => {\r\n  const [remaining, setRemaining] = useState<number>(0);\r\n  const [id, setId] = useState<string>(\"\");\r\n  const [points, setPoints] = useState<number>(0);\r\n  const [history, setHistory] = useState<IHistoryElement[]>([]);\r\n  const [currentCard, setCurrentCard] = useState<ICard>({\r\n    code: false,\r\n  });\r\n  const [prevCard, setPrevCard] = useState<ICard>({\r\n    code: false,\r\n  });\r\n\r\n  /**\r\n   * find place in order of cards\r\n   * @param {ICard} card - card to find index\r\n   * @returns {number} - number of index\r\n   */\r\n  const indexOfOrderSuit = (card: ICard): number => {\r\n    return cardOrder.findIndex((v: string) => v === card.value);\r\n  };\r\n\r\n  /** reset deck and point\r\n   * @return void\r\n   **/\r\n  const getDeck = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://deckofcardsapi.com/api/deck/new/draw/?count=1\"\r\n      );\r\n\r\n      const deck: INewDeck = await response.json();\r\n\r\n      if (deck.success == false)\r\n        throw \"API deckofcardsapi not responding corectly\";\r\n\r\n      setPoints(0);\r\n\r\n      setHistory([]);\r\n      setPrevCard({\r\n        ...deck.cards[0],\r\n        ...{ index: indexOfOrderSuit(deck.cards[0]) },\r\n      });\r\n      setRemaining(deck.remaining);\r\n      setId(deck.deck_id);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  /** take new card from deck and compare with prev\r\n   * @param {\"higher\"|\"lower\"} userState - user selection higer or lower next card\r\n   * @return void\r\n   **/\r\n  const nextCard = async (userState: \"higher\" | \"lower\") => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://deckofcardsapi.com/api/deck/${id}/draw/?count=1`\r\n      );\r\n\r\n      const deck: INewDeck = await response.json();\r\n\r\n      if (deck.success == false)\r\n        throw \"API deckofcardsapi not responding corectly\";\r\n\r\n      const card = deck.cards[0];\r\n\r\n      const currentIndex: number = indexOfOrderSuit(card);\r\n\r\n      setCurrentCard({ ...card, ...{ index: currentIndex } });\r\n\r\n      let state: \"higher\" | \"lower\" = \"lower\";\r\n\r\n      if (prevCard.index !== undefined) {\r\n        if (currentIndex > prevCard.index) {\r\n          state = \"higher\";\r\n        } else if (currentIndex == prevCard.index) {\r\n          const currentSuit: number = suitOrder.findIndex(\r\n            (v: string) => v === card.suit\r\n          );\r\n          const prevSuit: number = suitOrder.findIndex(\r\n            (v: string) => v === prevCard.suit\r\n          );\r\n          if (currentSuit > prevSuit) {\r\n            state = \"higher\";\r\n          }\r\n        }\r\n      }\r\n\r\n      if (state === userState) {\r\n        setPoints(points + 1);\r\n      }\r\n\r\n      if (prevCard.code != false && card.code != false) {\r\n        const hEl: IHistoryElement = {\r\n          prev: prevCard.code,\r\n          cur: card.code,\r\n          state: state,\r\n          point: state === userState,\r\n        };\r\n        setHistory((old) => [hEl, ...old]);\r\n      }\r\n\r\n      setTimeout(\r\n        () => nextRound({ ...deck.cards[0], ...{ index: currentIndex } }),\r\n        500\r\n      );\r\n\r\n      setRemaining(deck.remaining);\r\n\r\n      return deck;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  /** start next round, clear current, set prev to current\r\n   * @param {ICard} current - current card\r\n   * @return void\r\n   **/\r\n  const nextRound = (current: ICard) => {\r\n    setPrevCard(current);\r\n    setCurrentCard({ code: false });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDeck();\r\n  }, []);\r\n\r\n  return (\r\n    <View style={{ width: \"100%\" }}>\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-around\",\r\n        }}\r\n      >\r\n        {!currentCard.code && <Card back={true} />}\r\n        {currentCard.code && <Card card={currentCard} />}\r\n\r\n        <View style={[styles.bothCenter]}>\r\n          <Text style={{ fontSize: 30, fontWeight: \"900\", color: \"white\" }}>\r\n            LOWER or HIGHER\r\n          </Text>\r\n          <View\r\n            style={[\r\n              styles.rowCenter,\r\n              { width: 300, justifyContent: \"space-between\", marginBottom: 40 },\r\n            ]}\r\n          >\r\n            <Text style={{ fontSize: 20 }}>Points 🟢: {points} </Text>\r\n            <Text style={{ fontSize: 20 }}>Card left 🃏: {remaining} </Text>\r\n          </View>\r\n          <View style={{ marginBottom: 30 }}>\r\n            {remaining > 0 && (\r\n              <React.Fragment>\r\n                <Text>Will the next card be higher or lower?</Text>\r\n                <View\r\n                  style={{\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"space-between\",\r\n                  }}\r\n                >\r\n                  <Button\r\n                    disabled={currentCard.code != false}\r\n                    color=\"#e0a230\"\r\n                    onPress={() => nextCard(\"higher\")}\r\n                    title=\"Higher\"\r\n                  />\r\n                  <Button\r\n                    disabled={currentCard.code != false}\r\n                    onPress={() => nextCard(\"lower\")}\r\n                    title=\"Lower\"\r\n                  />\r\n                </View>\r\n              </React.Fragment>\r\n            )}\r\n            {remaining <= 0 && (\r\n              <React.Fragment>\r\n                <Text style={[styles.gameover]}>Game Over</Text>\r\n                <Text style={[styles.gameover]}>Your score: {points}</Text>\r\n              </React.Fragment>\r\n            )}\r\n          </View>\r\n\r\n          <View style={{}}>\r\n            <TouchableOpacity\r\n              style={[styles.buttonStyle]}\r\n              onPress={() => getDeck()}\r\n            >\r\n              <Text>RESTART</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n          <CardHistory history={history}></CardHistory>\r\n        </View>\r\n        {prevCard.code && <Card card={prevCard} />}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default CardGame;\r\n\r\nconst styles = StyleSheet.create({\r\n  info: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n\r\n  gameover: { fontSize: 30, color: \"white\" },\r\n  rowCenter: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"row\",\r\n  },\r\n  bothCenter: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  buttonStyle: {\r\n    marginBottom: 20,\r\n    padding: 8,\r\n    borderRadius: 5,\r\n    backgroundColor: \"#205b23\",\r\n  },\r\n  blue: {\r\n    backgroundColor: \"#3232ff\",\r\n  },\r\n  gold: {\r\n    backgroundColor: \"#e0a230\",\r\n  },\r\n});\r\n","import React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport CardGame from \"./components/CardGame\";\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <CardGame />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: \"100%\",\n    backgroundColor: \"#308834\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}